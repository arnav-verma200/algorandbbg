{
  "version": 3,
  "sources": [
    "C:/Users/Arnav verma/algorandbbg/projects/algorandbbg/smart_contracts/hello_world/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAM0C;AAA4B;;AAApE;AAHF;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAaE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AANF;;;AAAA;;;AAAA;;;AAAA;;;AAME;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAME;;;AACiB;;;;;;;;;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;AAAT;;AAAS;AAJuB;AAKtC;AAAA;AACA;;AAAA;AANsC;AAAA;AAAA;AAAA;AAWtC",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"bookRecord\" 0x151f7c75"
    },
    "23": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "25": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "28": {
      "op": "bytec_0 // \"bookRecord\"",
      "defined_out": [
        "\"bookRecord\""
      ],
      "stack_out": [
        "\"bookRecord\""
      ]
    },
    "29": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"bookRecord\""
      ],
      "stack_out": [
        "\"bookRecord\"",
        "\"\""
      ]
    },
    "31": {
      "op": "app_global_put",
      "stack_out": []
    },
    "32": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "34": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "37": {
      "op": "pushbytess 0x2da91f54 0x654129ce // method \"AddBook(string,string)string\", method \"GetBook()string\"",
      "defined_out": [
        "Method(AddBook(string,string)string)",
        "Method(GetBook()string)"
      ],
      "stack_out": [
        "Method(AddBook(string,string)string)",
        "Method(GetBook()string)"
      ]
    },
    "49": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(AddBook(string,string)string)",
        "Method(GetBook()string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(AddBook(string,string)string)",
        "Method(GetBook()string)",
        "tmp%2#0"
      ]
    },
    "52": {
      "op": "match main_AddBook_route@5 main_GetBook_route@6",
      "stack_out": []
    },
    "58": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "59": {
      "op": "return",
      "stack_out": []
    },
    "60": {
      "block": "main_GetBook_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "62": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "63": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "64": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "66": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "67": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::BookLibrary.GetBook",
      "op": "callsub GetBook",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "70": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "71": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "72": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "73": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "76": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "77": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "78": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "79": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "80": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "81": {
      "op": "log",
      "stack_out": []
    },
    "82": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "83": {
      "op": "return",
      "stack_out": []
    },
    "84": {
      "block": "main_AddBook_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "86": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "87": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "88": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "90": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "91": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "94": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "97": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "100": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "103": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::BookLibrary.AddBook",
      "op": "callsub AddBook",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "106": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "107": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "108": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "109": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "112": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "113": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "114": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "115": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "116": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "117": {
      "op": "log",
      "stack_out": []
    },
    "118": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "119": {
      "op": "return",
      "stack_out": []
    },
    "120": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "122": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "127": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "128": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "129": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "130": {
      "op": "return",
      "stack_out": []
    },
    "131": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::BookLibrary.AddBook",
      "params": {
        "title#0": "bytes",
        "author#0": "bytes"
      },
      "block": "AddBook",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "134": {
      "op": "pushbytes \"Title: \"",
      "defined_out": [
        "\"Title: \""
      ],
      "stack_out": [
        "\"Title: \""
      ]
    },
    "143": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"Title: \"",
        "title#0 (copy)"
      ],
      "stack_out": [
        "\"Title: \"",
        "title#0 (copy)"
      ]
    },
    "145": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "146": {
      "op": "pushbytes \", Author: \"",
      "defined_out": [
        "\", Author: \"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\", Author: \""
      ]
    },
    "158": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "159": {
      "op": "frame_dig -1",
      "defined_out": [
        "author#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "author#0 (copy)"
      ]
    },
    "161": {
      "op": "concat",
      "defined_out": [
        "record#0"
      ],
      "stack_out": [
        "record#0"
      ]
    },
    "162": {
      "op": "bytec_0 // \"bookRecord\"",
      "defined_out": [
        "\"bookRecord\"",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "\"bookRecord\""
      ]
    },
    "163": {
      "op": "swap",
      "stack_out": [
        "\"bookRecord\"",
        "record#0"
      ]
    },
    "164": {
      "op": "app_global_put",
      "stack_out": []
    },
    "165": {
      "op": "frame_dig -2",
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "167": {
      "retsub": true,
      "op": "retsub"
    },
    "168": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::BookLibrary.GetBook",
      "params": {},
      "block": "GetBook",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "169": {
      "op": "bytec_0 // \"bookRecord\"",
      "defined_out": [
        "\"bookRecord\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"bookRecord\""
      ]
    },
    "170": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "171": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "172": {
      "retsub": true,
      "op": "retsub"
    }
  }
}